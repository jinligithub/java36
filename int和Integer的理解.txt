int
int 是我们常说的整形数字，是 Java 的 8 个原始数据类型（boolean、byte、short、char、int、float、double、long）之一。Java 语言虽然号称一切都是对象，但原始数据类型是例外。

Integer
Integer 是 int 对应的包装类，它有一个 int 类型的字段存储数据，并且提供了基本操作，比如数学运算、int 和字符串之间转换等。在 Java 5 中，引入了自动装箱和自动拆箱功能（boxing/unboxing），Java 可以根据上下文，自动进行转换，极大地简化了相关编关于 Integer 的值缓存，这涉及 Java 5 中另一个改进。构建 Integer 对象的传统方式是直接调用构造器，直接 new 一个对象。但是根据实践，我们发现大部分数据操作都是集中在有限的、较小的数值范围，因而，在 Java 5 中新增了静态工厂方法 valueOf，在调用它的时候会利用一个缓存机制，带来了明显的性能改进。按照 Javadoc（和源代码配套的API帮助文档），这个值默认缓存是 -128 到 127 之间。

?Integer 的源码

?

  private static class IntegerCache {
        static final int low = -128;
        static final int high;
        static final Integer cache[];
 
        static {
            // high value may be configured by property
            int h = 127;
            String integerCacheHighPropValue =
                sun.misc.VM.getSavedProperty("java.lang.Integer.IntegerCache.high");
            if (integerCacheHighPropValue != null) {
                try {
                    int i = parseInt(integerCacheHighPropValue);
                    i = Math.max(i, 127);
                    // Maximum array size is Integer.MAX_VALUE
                    h = Math.min(i, Integer.MAX_VALUE - (-low) -1);
                } catch( NumberFormatException nfe) {
                    // If the property cannot be parsed into an int, ignore it.
                }
            }
            high = h;
 
            cache = new Integer[(high - low) + 1];
            int j = low;
            for(int k = 0; k < cache.length; k++)
                cache[k] = new Integer(j++);
 
            // range [-128, 127] must be interned (JLS7 5.1.7)
            assert IntegerCache.high >= 127;
        }
 
        private IntegerCache() {}
    }
IntegerCache是Integer的一个内部类，它包含了int可能值的Integer数组，默认范围是[-128,127]，它不会像Byte类将所有可能值缓存起来，因为int类型范围很大，将它们全部缓存起来代价太高，而Byte类型就是从-128到127，一共才256个。所以这里默认只实例化256个Integer对象，当Integer的值范围在[-128,127]时则直接从缓存中获取对应的Integer对象，不必重新实例化。这些缓存值都是静态且final的，避免重复的实例化和回收。另外我们可以改变这些值缓存的范围，再启动JVM时通过-Djava.lang.Integer.IntegerCache.high=xxx就可以改变缓存值的最大值，比如-Djava.lang.Integer.IntegerCache.high=1000则会缓存[-128,1000]。
因为字符串的设计实现时,提到过字符串是不可变的,保证了基本的信息安全和并发编程中的线程安全.在0包装类里存储数值的成员变量“value”,你会发现,不管是 Integer 还 Boolean 等,都被声明为“private final”,所以,它们同样是不可变类型! 这种设计是可以理解的,或者说是必须的选择.想象一下这个应用场景,比如 Integer 提供了 getInteger() 方法,用于方便地读取系统属性,我们可以用属性来设置服务器某个服务的端口, 如果我可以轻易地把获取到的 Integer 对象改变为其他数值,这会带来产品可靠性方面的严重问题


Integer 等包装类，定义了类似 SIZE 或者 BYTES 这样的常量，这反映了什么样的设计考虑呢？如果你使用过其他语言，比如 C、C++，类似整数的位数，其实是不确定的，可能在不同的平台，比如 32 位或者 64 位平台，存在非常大的不同。那么，在 32 位 JDK 或者 64 位JDK 里，数据位数会有不同吗？或者说，这个问题可以扩展为，我使用 32 位 JDK 开发编译的程序，运行在 64 位 JDK 上，需要做什么特别的移植工作吗？其实，这种移植对于 Java 来说相对要简单些，因为原始数据类型是不存在差异的，这些明确定义在Java 语言规范里面，不管是 32 位还是 64 位环境，开发者无需担心数据的位数差异。对于应用移植，虽然存在一些底层实现的差异，比如 64 位 HotSpot JVM 里的对象要比 32 位HotSpot JVM 大（具体区别取决于不同 JVM 实现的选择），但是总体来说，并没有行为差异，应用移植还是可以做到宣称的“一次书写，到处执行”，应用开发者更多需要考虑的是容量、能力等方面的差异。
?
原始类型线程安全

对于线程安全设计，原始数据类型操作是不是线程安全的呢？
这里可能存在着不同层面的问题：

原始数据类型的变量，显然要使用并发相关手段，才能保证线程安全，这些我会在专栏后面的并发主题详细介绍。如果有线程安全的计算需要，建议考虑使用类似 AtomicInteger、AtomicLong 这样的线程安全类
特别的是，部分比较宽的数据类型，比如 float、double，甚至不能保证更新操作的原子性，可能出现程序读取到只更新了一半数据位的数值！
.Java 原始数据类型和引用类型局

原始数据类型和 Java 泛型并不能配合使用
这是因为 Java 的泛型某种程度上可以算作伪泛型,它完全是一种编译期的技巧,Java 编译期会自动将类型转换为对应的特定类型,这就决定了使用泛型,必须保证相应类型可以转换为Object

无法高效地表达数据,也不便于表达复杂的数据结构,比如 vector 和 tuple
我们知道 Java 的对象都是引用类型,如果是一个原始数据类型数组,它在内存里是一段连续的内存,而对象数组则不然,数据存储的是引用,对象往往是分散地存储在堆的不同位置.这种设计虽然带来了极大灵活性,但是也导致了数据操作的低效,尤其是无法充分利用现代 CPU 缓存机制.ava 为对象内建了各种多态,线程安全等方面的支持,但这不是所有场合的需求,尤其是数据处理重要性日益提高,更加高密度的值类型是非常现实的

?

装箱与拆箱
装箱:将基本数据类型变为包装类对象，利用每个包装类提供的构造方法实现装箱处理。

拆箱:将包装类中包装的基本数据类型的值取出。

JDK1.5之后提供了自动拆装箱机制,使用包装类对象就和使用基本数据类型一模一样

对于Integer var = ?(自动装箱) ?在-128-127之间的赋值，Integer对象在Integer常量池产生，会复用已有对象。在这个区间外的所有数据在堆上产生，不会复用已有对象。

自动装箱实际上算是一种语法糖。语法糖可以简单理解为 Java 平台为我们自动进行了一些转换,保证不同的写法在运行时等价,它们发生在编译阶段,也就是生成的字节码是一致的。

问题：

1.判断两个包装类对象是否相等,

使用equals方法比较
2.自动装箱 / 自动拆箱 是发生在什么阶段?

,它们发生在编译阶段,也就是生成的字节码是一致 的. 像前面提到的整数,javac 替我们自动把装箱转换为 Integer.valueOf(),把拆箱替换为 Integer.intValue(),这似乎这也顺道回答了另一个问题,既然调用的是 Integer.valueOf,自然 能够得到缓存的好处啊
对下面代码进行编译（javac? 类名），然后再反编译（Javap? -v? 类名）

Integer integer = 1;
int unboxing = integer +1；
反编译结果：



int	intValue()
将 Integer的值作为 int 。

static Integer	valueOf(int?i)
返回一个 Integer指定的 int值的 Integer实例。

static Integer	valueOf(String?s)
返回一个 Integer对象，保存指定的值为 String 。

static Integer	valueOf(String?s, int?radix)
返回一个 Integer对象，保存从指定的String中 String的值，当用第二个参数给出的基数进行解析时。

包装类
包装类就是将基本数据类型封装到类中。

Java中的包装类
数值型包装类(Number类的子类):NumberFormatException
Byte、Double、Short、Long、Float、Integer(int)

对象型包装类(Object类的直接子类)
Boolean、Character(char)

这种缓存机制并不是只有 Integer 才有，同样存在于其他的一些包装类，比如：

Boolean，缓存了 true/false 对应实例，确切说，只会返回两个常量实例
Boolean.TRUE/FALSE。
Short，同样是缓存了 -128 到 127 之间的数值。
Byte，数值有限，所以全部都被缓存。
Character，缓存范围 '\u0000' 到 '\u007F
自动拆箱和装箱的注意问题：

原则上，建议避免无意中的装箱、拆箱行为，尤其是在性能敏感的场合，如创建 10 万个 Java 对象和 10 万个整数的开销可不是一个数量级的，不管是内存使用还是处理速度，光是对象头的空间占用就已经是数量级的差距了。
如果使用原始数据类型、数组甚至本地代码实现等，在性能极度敏感的场景往往具有比较大的优势，用其替换掉包装类、动态数组（如 ArrayList）等可以作为性能优化的备选项。一些追求极致性能的产品或者类库，会极力避免创建过多对象。
到底选择包装类还是基本类型?

1.强制要求:所有POJO类(自己定义的Java类)的属性均使用包装类
2.推荐:所有局部变量使用基本类型

字符串与包装类型数据类型的转换

String -> 基本类型
使用包装类提供的parseXXX方法
eg: Integer.parseInt("123");

?

NumberFormatException产生原因:
存在非数字的字符串转为数值类型
eg:Integer.parseInt("123a");

以后在进行字符串与数值转换时，首先判断字符串是否由纯数字组成。

基本类型->String

I.""+基本类型
II.调用String.valueOf(各种数据类型)
?
?
